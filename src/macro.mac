;;; Push many.
%macro _push 1-*
  %rep %0
    push %1
    %rotate 1
  %endrep
%endmacro

;;; Push many in reverse.
%macro _rpush 1-*
  %rep %0
    %rotate -1
    push %1
  %endrep
%endmacro

;;; Pop many.
%macro _pop 1-*
  %rep %0
    pop %1
    %rotate 1
  %endrep
%endmacro

;;; Pop many in reverse.
%macro _rpop 1-*
  %rep %0
    %rotate -1
    pop %1
  %endrep
%endmacro

;;; Write to word-sized port.
;;; _out port, byte
;;; : : al dx
%macro _out 2
  mov dx, %1
  mov al, %2
  out dx, al
%endmacro

;;; Read from word-sized port.
;;; _in port
;;; : al(byte) : dx
%macro _in 1
  mov dx, %1
  in al, dx
%endmacro

;;; Place a string in .rodata and move its length and pointer into registers.
;;; _string len, ptr, str
%macro _string 3+
  [section .rodata]
  %%string: db %3
  %%string.#: equ $ - %%string

  __SECT__
  mov %1, %%string.#
  mov %2, %%string
%endmacro

;;; Place a string in .rodata and move its length and pointer into ecx and esi.
;;; _string str
;;; : : ecx(strLen) esi(str)
%macro _string 1
  _string ecx, esi, %1
%endmacro
